import re
from sumy._compat import to_unicode

title="ARM"

scores=[[1, u'Chapter 1. ARM Embedded Systems', 0],
[2, u'1.1 The RISC design philosophy', 0.54518518518518533],
[2, u'1.2 The ARM Design Philosophy', 0.70222493142334652],
[2, u'1.3 Embedded System Hardware', 0.37426900584795308],
[2, u'1.4 Embedded System Software', 0.46943014085775492],
[2, u'1.5 Summary', 0.39022662911623435],
[1, u'Chapter 2. ARM Processor Fundamentals', 0],
[2, u'2.1 Registers', 0.66795516041747194],
[2, u'2.2 Current Program Status Register', 0.39754840628673255],
[2, u'2.3 Pipeline', 0.46352032090919859],
[2, u'2.4 Exceptions, Interrupts, and the Vector Table', 0.55011824631617257],
[2, u'2.5 Core Extensions', 0.40428199517656638],
[2, u'2.6 Architecture Revisions', 0.59268292682926849],
[2, u'2.7 ARM Processor Families', 0.36413213474588951],
[2, u'2.8 Summary', 0.261564767749697],
[1, u'Chapter 3. Introduction to the ARM Instruction Set', 0],
[2, 'Chapter Introduction', 1.0],
[2, u'3.1 Data Processing Instructions', 0.3148926501141685],
[2, u'3.2 Branch Instructions', 0.59790732436472349],
[2, u'3.3 Load-Store Instructions', 0.33987210097112147],
[2, u'3.4 Software Interrupt Instruction', 0.90476190476190477],
[2, u'3.5 Program Status Register Instructions', 0.47278835484564219],
[2, u'3.6 Loading Constants', 0.58695652173913038],
[2, u'3.7 ARMv5E Extensions', 0.45001112112942848],
[2, u'3.8 Conditional Execution', 0.62790697674418594],
[2, u'3.9 Summary', 0.72876250150620525],
[1, u'Chapter 4. Introduction to the Thumb Instruction Set', 0],
[2, u'4.1 Thumb Register Usage', 0.63132722200079716],
[2, u'4.2 ARM-Thumb Interworking', 0.56823131490675849],
[2, u'4.3 Other Branch Instructions', 1.0],
[2, u'4.4 Data Processing Instructions', 0.49641264300950155],
[2, u'4.5 Single-Register Load-Store Instructions', 0.64400715563506261],
[2, u'4.6 Multiple-Register Load-Store Instructions', 0.57599999999999985],
[2, u'4.8 Software Interrupt Instruction', 0.875],
[2, u'4.9 Summary', 0.4406031008390901],
[1, u'Chapter 5. Efficient C Programming', 0],
[2, u'5.1 Overview of C Compilers and Optimization', 0.75130434782608713],
[2, u'5.2 Basic C Data Types', 0.37953670978687443],
[2, u'5.3 C Looping Structures', 0.40988593155893543],
[2, u'5.4 Register Allocation', 0.580909244957582],
[2, u'5.5 Function Calls', 0.5819016704932306],
[2, u'5.6 Pointer Aliasing', 0.59352173049941281],
[2, u'5.7 Structure Arrangement', 0.60544904137235145],
[2, u'5.8 Bit-fields', 0.89655172413793105],
[2, u'5.9 Unaligned Data and Endianness', 0.41834627623101001],
[2, u'5.10 Division', 0.28448935356368737],
[2, u'5.11 Floating Point', 0.90909090909090906],
[2, u'5.12 Inline Functions and Inline Assembly', 0.63846585123059152],
[2, u'5.13 Portability Issues', 0.58354537743850676],
[2, u'5.14 Summary', 0.45100245545781287],
[1, u'Chapter 6. Writing and Optimizing ARM Assembly Code', 0],
[2, 'Chapter Introduction', 0.16700827450087299],
[2, u'6.1 Writing Assembly Code', 0.34582766778536678],
[2, u'6.2 Profiling and Cycle Counting', 0.78260869565217395],
[2, u'6.3 Instruction Scheduling', 0.30201837640652357],
[2, u'6.4 Register Allocation', 0.34728122344944778],
[2, u'6.5 Conditional Execution', 0.48452220726783296],
[2, u'6.6 Looping Constructs', 0.25056854686559865],
[2, u'6.7 Bit Manipulation', 0.39137046421958299],
[2, u'6.8 Efficient Switches', 0.3508951864739554],
[2, u'6.9 Handling Unaligned Data', 0.47483870967741948],
[2, u'6.10 Summary', 0.34141201264488913],
[1, u'Chapter 7. Optimized Primitives', 0],
[2, 'Chapter Introduction', 0.064167433302667914],
[2, u'7.1 Double-Precision Integer Multiplication', 0.47367578812610023],
[2, u'7.2 Integer Normalization and Count Leading Zeros', 0.41157298300155437],
[2, u'7.3 Division', 0.26351120515810822],
[2, u'7.4 Square Roots', 0.27968494271685757],
[2, u'7.5 Transcendental Functions: log, exp, sin, cos', 0.4132441045839656],
[2, u'7.6 Endian Reversal and Bit Operations', 0.26926614578896235],
[2, u'7.7 Saturated and Rounded Arithmetic', 0.59478260869565214],
[2, u'7.8 Random Number Generation', 0.4401166309071905],
[2, u'7.9 Summary', 0.55439805960679189],
[1, u'Chapter 8. Digital Signal Processing', 0],
[2, 'Chapter Introduction', 0.05403155624503387],
[2, u'8.1 Representing a Digital Signal', 0.28910469251823129],
[2, u'8.2 Introduction to DSP on the ARM', 0.37524187535710563],
[2, u'8.3 FIR filters', 0.31418780232671001],
[2, u'8.4 IIR Filters', 0.36666666666666653],
[2, u'8.5 The Discrete Fourier Transform', 0.26517895957107646],
[2, u'8.6 Summary', 0.29233855292416294],
[1, u'Chapter 9. Exception and Interrupt Handling', 0],
[2, u'9.1 Exception Handling', 0.32464794670714225],
[2, u'9.2 Interrupts', 0.35432214115714983],
[2, u'9.3 Interrupt Handling Schemes', 0.29005322850322746],
[2, u'9.4 Summary', 0.551111111111111],
[1, u'Chapter 10. Firmware', 0],
[2, u'10.1 Firmware and Bootloader', 0.35412791529546406],
[2, u'10.2 Example: Sandstone', 0.23547613759085786],
[2, u'10.3 Summary', 0.47601493757312541],
[1, u'Chapter 11. Embedded Operating Systems', 0],
[2, u'11.1 Fundamental Components', 0.48866326465597365],
[2, u'11.2 Example: Simple Little Operating System', 0.28370788519765761],
[2, u'11.3 Summary', 0.37924423279114378],
[1, u'Chapter 12. Caches', 0],
[2, u'12.1 The Memory Hierarchy and Cache Memory', 0.4335797457629571],
[2, u'12.2 Cache Architecture', 0.33400216214149681],
[2, u'12.3 Cache Policy', 0.26934867535785084],
[2, u'12.4 Coprocessor 15 and Caches', 0.52224371373307543],
[2, u'12.5 Flushing and Cleaning Cache Memory', 0.34417631368154405],
[2, u'12.6 Cache Lockdown', 0.28539285688140326],
[2, u'12.7 Caches and Software Performance', 0.75],
[2, u'12.8 Summary', 0.36300125885529722],
[1, u'Chapter 13. Memory Protection Units', 0],
[2, u'13.1 Protected Regions', 0.35453075468423123],
[2, u'13.2 Initializing the MPU, Caches, and Write Buffer', 0.31824910155734865],
[2, u'13.3 Demonstration of an MPU system', 0.30618067443252195],
[2, u'13.4 Summary', 0.40654077667595639],
[1, u'Chapter 14. Memory Management Units', 0],
[2, 'Chapter Introduction', 0.14391410535097574],
[2, u'14.1 Moving from an MPU to an MMU', 0.80000000000000004],
[2, u'14.2 How Virtual Memory Works', 0.39514734816401159],
[2, u'14.3 Details of the ARM MMU', 0.83333333333333337],
[2, u'14.4 Page Tables', 0.43028197364987442],
[2, u'14.5 The Translation Lookaside Buffer', 0.42923221626383412],
[2, u'14.6 Domains and Memory Access Permission', 0.47225021732018352],
[2, u'14.7 The Caches and Write Buffer', 0.59999999999999998],
[2, u'14.8 Coprocessor 15 and MMU Configuration', 0.55193992490613253],
[2, u'14.9 The Fast Context Switch Extension', 0.3274131962631428],
[2, u'14.10 Demonstration: A Small Virtual Memory System', 0.257780031790658],
[2, u'14.11 The Demonstration as mmuSLOS', 0.81818181818181823],
[2, u'14.12 Summary', 0.41360544217687073],
[1, u'Chapter 15. The Future of the Architecture', 0],
[2, u'15.1 Advanced DSP and SIMD Support in ARMv6', 0.35544316745038423],
[2, u'15.2 System and Multiprocessor Support Additions to ARMv6', 0.53220347876275664],
[2, u'15.3 ARMv6 Implementations', 0.9285714285714286],
[2, u'15.4 Future Technologies beyond ARMv6', 0.6428571428571429],
[2, u'15.5 Summary', 0.40761294647845342],
[1, u'Appendix A.  ARM and Thumb Assembler Instructions', 0],
[2, u'A.1 Using This Appendix', 0.10247209805837768],
[2, u'A.2 Syntax', 0.026697823930846534],
[2, u'A.3 Alphabetical List of ARM and Thumb Instructions', 0.053667214460640517],
[2, u'A.4 ARM Assembler Quick Reference', 0.066955271899760208],
[2, u'A.5 GNU Assembler Quick Reference', 0.029336657315702869],
[1, u'Appendix B.  ARM and Thumb Instruction Encodings', 0],
[2, u'B.1 ARM Instruction Set Encodings', 0.098275178074980971],
[2, u'B.2 Thumb Instruction Set Encodings', 0.12106297650328453],
[2, u'B.3 Program Status Registers', 0.064618557056609766],
[1, u'Appendix C.  Processors and Architecture', 0],
[2, u'C.1 ARM Naming Convention', 0.34983963633624932],
[2, u'C.2 Core and Architectures', 0.1617657675783363],
[1, u'Appendix D.  Instruction Cycle Timings', 0],
[2, u'D.1 Using the Instruction Cycle Timing Tables', 0.23624289410011443],
[2, u'D.2 ARM7TDMI Instruction Cycle Timings', 0.17668069990388735],
[2, u'D.3 ARM9TDMI Instruction Cycle Timings', 0.18029354237772741],
[2, u'D.4 StrongARM1 Instruction Cycle Timings', 0.18015482019128201],
[2, u'D.5 ARM9E Instruction Cycle Timings', 0.13524280727521923],
[2, u'D.6 ARM10E Instruction Cycle Timings', 0.17580025926167189],
[2, u'D.7 Intel XScale Instruction Cycle Timings', 0.094026322708246388],
[2, u'D.8 ARM11 Cycle Timings', 0.10164267901001815],
[1, u'Appendix E.  Suggested Reading', 0]]

for i in range(0,len(scores)):  
    scores[i][1]=to_unicode(scores[i][1]).strip() 
    scores[i][1] = re.sub(u"(\u2018|\u2019)", "'", scores[i][1])
   
